package com.ajjpj.asysmon.measure.jdbc;

import com.ajjpj.asysmon.ASysMon;
import com.ajjpj.asysmon.measure.ASimpleMeasurement;

import java.sql.*;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Executor;

/**
 * @author arno
 */
public class ASysMonConnection implements Connection {
    private final Connection inner;
    private final ASysMon sysMon;

    public ASysMonConnection(Connection inner, ASysMon sysMon) {
        this.inner = inner;
        this.sysMon = sysMon;
    }

//------------------- Wrapper interface

    @Override public <T> T unwrap(Class<T> iface) throws SQLException {
        return inner.unwrap(iface); //TODO wrap this in a dynamic proxy to keep track of non-standard SQL stuff as well?
    }

    @Override public boolean isWrapperFor(Class<?> iface) throws SQLException {
        return inner.isWrapperFor(iface);
    }

    //------------------- creating statements

    @Override public Statement createStatement() throws SQLException {
        return wrap(inner.createStatement());
    }

    @Override public PreparedStatement prepareStatement(String sql) throws SQLException {
        return wrap(inner.prepareStatement(sql), sql);
    }

    @Override public CallableStatement prepareCall(String sql) throws SQLException {
        return wrap(inner.prepareCall(sql), sql);
    }

    @Override public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
        return wrap(inner.createStatement(resultSetType, resultSetConcurrency));
    }

    @Override public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        return wrap(inner.prepareStatement(sql, resultSetType, resultSetConcurrency), sql);
    }

    @Override public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        return wrap(inner.prepareCall(sql, resultSetType, resultSetConcurrency), sql);
    }

    @Override public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        return wrap(inner.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability));
    }

    @Override public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        return wrap(inner.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability), sql);
    }

    @Override public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        return wrap(inner.prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability), sql);
    }

    @Override public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
        return wrap(inner.prepareStatement(sql, autoGeneratedKeys), sql);
    }

    @Override public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
        return wrap(inner.prepareStatement(sql, columnIndexes), sql);
    }

    @Override public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
        return wrap(inner.prepareStatement(sql, columnNames), sql);
    }

    private Statement wrap(Statement stmt) {
        return new ASysMonStatement(this, stmt, sysMon);
    }

    private PreparedStatement wrap(PreparedStatement stmt, String sql) {
        return new ASysMonPreparedStatement(this, stmt, sysMon, sql);
    }

    private CallableStatement wrap(CallableStatement stmt, String sql) {
        return new ASysMonCallableStatement(this, stmt, sysMon, sql);
    }

    //------------------------------- transaction handling

    @Override
    public void commit() throws SQLException {
        final ASimpleMeasurement m = sysMon.start(ASysMonStatement.IDENT_PREFIX_JDBC + "commit");
        try {
            inner.commit();
        }
        finally {
            m.finish();
        }
    }

    @Override
    public void rollback() throws SQLException {
        final ASimpleMeasurement m = sysMon.start(ASysMonStatement.IDENT_PREFIX_JDBC + "rollback");
        try {
            inner.rollback();
        } finally {
            m.finish();
        }
    }

    @Override
    public Savepoint setSavepoint() throws SQLException {
        final ASimpleMeasurement m = sysMon.start(ASysMonStatement.IDENT_PREFIX_JDBC + "setSavepoint");
        try {
            return inner.setSavepoint();
        } finally {
            m.finish();
        }
    }

    @Override
    public Savepoint setSavepoint(String name) throws SQLException {
        final ASimpleMeasurement m = sysMon.start(ASysMonStatement.IDENT_PREFIX_JDBC + "setSavepoint");
        try {
            return inner.setSavepoint(name);
        } finally {
            m.finish();
        }
    }

    @Override
    public void rollback(Savepoint savepoint) throws SQLException {
        final ASimpleMeasurement m = sysMon.start(ASysMonStatement.IDENT_PREFIX_JDBC + "rollback");
        try {
            inner.rollback(savepoint);
        } finally {
            m.finish();
        }
    }

    @Override
    public void releaseSavepoint(Savepoint savepoint) throws SQLException {
        final ASimpleMeasurement m = sysMon.start(ASysMonStatement.IDENT_PREFIX_JDBC + "releaseSavepoint");
        try {
            inner.releaseSavepoint(savepoint);
        } finally {
            m.finish();
        }
    }

    //------------------- misc / ignored by ASysMon

    @Override
    public void close() throws SQLException {
        inner.close();
    }


    @Override
    public String nativeSQL(String sql) throws SQLException {
        return inner.nativeSQL(sql);
    }

    @Override
    public void setAutoCommit(boolean autoCommit) throws SQLException {
        inner.setAutoCommit(autoCommit);
    }

    @Override
    public boolean getAutoCommit() throws SQLException {
        return inner.getAutoCommit();
    }

    @Override
    public boolean isClosed() throws SQLException {
        return inner.isClosed();
    }

    @Override
    public DatabaseMetaData getMetaData() throws SQLException {
        return inner.getMetaData();
    }

    @Override
    public void setReadOnly(boolean readOnly) throws SQLException {
        inner.setReadOnly(readOnly);
    }

    @Override
    public boolean isReadOnly() throws SQLException {
        return inner.isReadOnly();
    }

    @Override
    public void setCatalog(String catalog) throws SQLException {
        inner.setCatalog(catalog);
    }

    @Override
    public String getCatalog() throws SQLException {
        return inner.getCatalog();
    }

    @Override
    public void setTransactionIsolation(int level) throws SQLException {
        inner.setTransactionIsolation(level);
    }

    @Override
    public int getTransactionIsolation() throws SQLException {
        return inner.getTransactionIsolation();
    }

    @Override
    public SQLWarning getWarnings() throws SQLException {
        return inner.getWarnings();
    }

    @Override
    public void clearWarnings() throws SQLException {
        inner.clearWarnings();
    }

    @Override
    public Map<String, Class<?>> getTypeMap() throws SQLException {
        return inner.getTypeMap();
    }

    @Override
    public void setTypeMap(Map<String, Class<?>> map) throws SQLException {
        inner.setTypeMap(map);
    }

    @Override
    public void setHoldability(int holdability) throws SQLException {
        inner.setHoldability(holdability);
    }

    @Override
    public int getHoldability() throws SQLException {
        return inner.getHoldability();
    }

    @Override
    public Clob createClob() throws SQLException {
        return inner.createClob();
    }

    @Override
    public Blob createBlob() throws SQLException {
        return inner.createBlob();
    }

    @Override
    public NClob createNClob() throws SQLException {
        return inner.createNClob();
    }

    @Override
    public SQLXML createSQLXML() throws SQLException {
        return inner.createSQLXML();
    }

    @Override
    public boolean isValid(int timeout) throws SQLException {
        return inner.isValid(timeout);
    }

    @Override
    public void setClientInfo(String name, String value) throws SQLClientInfoException {
        inner.setClientInfo(name, value);
    }

    @Override
    public void setClientInfo(Properties properties) throws SQLClientInfoException {
        inner.setClientInfo(properties);
    }

    @Override
    public String getClientInfo(String name) throws SQLException {
        return inner.getClientInfo(name);
    }

    @Override
    public Properties getClientInfo() throws SQLException {
        return inner.getClientInfo();
    }

    @Override
    public Array createArrayOf(String typeName, Object[] elements) throws SQLException {
        return inner.createArrayOf(typeName, elements);
    }

    @Override
    public Struct createStruct(String typeName, Object[] attributes) throws SQLException {
        return inner.createStruct(typeName, attributes);
    }

    // introduced with JDK 1.7

    public void setSchema(String schema) throws SQLException {
        inner.setSchema(schema);
    }

    public String getSchema() throws SQLException {
        return inner.getSchema();
    }

    public void abort(Executor executor) throws SQLException {
        inner.abort(executor);
    }

    public void setNetworkTimeout(Executor executor, int milliseconds) throws SQLException {
        inner.setNetworkTimeout(executor, milliseconds);
    }

    public int getNetworkTimeout() throws SQLException {
        return inner.getNetworkTimeout();
    }
}
