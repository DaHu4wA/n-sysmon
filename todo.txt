todo
----
* kurios
  * UUID.randomUUID() --> performance, blocking behavior

* architecture
  * resend data after failure --> just add to the queue again --> idempotence on the server

* server features
  * API for data retrieval
    * scalars, environment, traces
    * local and remote
  * simple web UI
  * derived scalars as listeners on the event bus, e.g. 'requests per second', 'transactions per second' or 'GC frequency'
  * permission checks
    * collection with users / MD5 of password
    * admin flag, arrays of applications with read / write permissions

* core
  * test on Windows --> graceful degradation

  * cleanup
    * error handling for Rest calls in asysmon-module.js

  * read versions from manifests of JAR files (?)

  * network: display bytes instead of packets
  * make timer configurable
  * make app, instance and version configurable

  * tune timeouts

  * add more scalar measurements
    * /proc/cpuinfo: mostly 'environment', but frequency is 'scalar'
    * /proc/meminfo (the variable parts) (+ swap)
  * 'environment'
    * JVM details (esp. command line switches)
    * App Server details (via reflection?)

  * beautify
    * scalar page:
      * separate section for GC
      * progress bars: center value for 'load' and 'JVM mem'
      * disks: show mount points
    * 'environment': start with expanded 'Overview'
    * generally: styling of tooltips - white with gray border?
    * show application ID etc. (with color code)
    * aggregated: somehow show what is currently 'picked' --> bread crumbs?
    * beautify memgc gc tooltips
  * clean up
    * clean up 'aggregated.js', remove superfluous code, move stuff from scope visibility to internal visibility
    * rename 'aggregated' to 'hierarchical', make 'start' / 'stop' optional; rename '...PerformancePageDef' to '...HierarchicalPageDef'
  * lock-free aggregation implementation?


* documentation (!!!)

* presentation of active / open connections per pool: special treatment <active> / <open>

* load average from sun.misc.Unsafe --> Windows?!

* global measurements
  * /proc/self/cmdline
  * /proc/self/io          http://stackoverflow.com/questions/3633286/understanding-the-counters-in-proc-pid-io
  * /proc/self/net --> ?!?!? 'nethogs' instead?

  * pidstat for 'self' disk I/O

  * Felix: cache hit / miss etc.

* limit measurement time for scalars and environment data

* logo in report servlets (?)

* log asysmon overhead (?)

* extract a-base
  * partial order
  * mapWithDefault, mapWithDefaultValue
  * queue

AOP:
--> File I/O
--> Socket I/O

* instrumentation
  * 'correlation id' per thread, implicitly linked to other threads

* global measurements
  * JMX - tomcat, JVM, ...

* management server
  * rolling average for scalars
  * derived values - store them or calculate them on demand?
  * dashboard: configurable views
  * free JS graph library, update via server socket
  * communication *initiated* by applications, but management server sends *back* administrative commands (e.g. change measurement frequency, filter stuff, ...)
  * rapid changes in clock difference --> sound an alarm

* JS performance api


discuss
-------
* how to deal with data sources in app server --> outside application scope

documentation
-------------
* config
  * asysmon-default.properties < asysmon.properties < System.getProperties (with prefix)
  * @ABeanFeactory
  * alias

* "globally disabled" by system property

* terminology
  * measurement: something ongoing --> something like a builder
  * data: immutable results of a finished measurement

* initialization
  * completely non-static
  * or static 'ASysMon.get()' --> AStaticSysMonConfig.get(), changes must be registered there before first access

* AMinMaxAvgServlet
  * load-on-startup = 1
  * security --> filter --> responsibility of the application
  * display
    * color coding / percentage: relative to immediate parent
    * #: average number of calls *per parent*

* database drill-up servlet
  * 'eventually consistent' --> trade-off to avoid global locking

* no top-level 'parallel' measurement

* Correlation ID etc.: as a 'context' of a measurement hierarchy (if present)
  * ASysMon.spawnNewCorrelation(...), ASysMon.joinCorrelation(...)
  * any time during a measurement --> knowledge of a correlation ID can come e.g. after parsing of a message, i.e. after JDBC or I/O
  * separate 'kind' and 'correlation id' to keep multiple

* shutdown
  * ASysMon.shutdown() shuts down all registered measurers and data sinks
  * if one of the servlets is registered, container shutdown shuts down ASysMon (unless otherwise configured --> AGlobalConfig.setImplicitlyShutDownWithServlet)
  * idempotent --> safe to shut down repeatedly

* server separation into modules: ...-war allows import of all code while providing your own web.xml (or bundling with your own application)

* configuration
* AWithDataSink

* CPU "available": may vary over time --> 'stolen'
