todo
----
* JDBC
  * DataSource --> keep track of number of used connections
  * global measurements: currently used connections (per connection pool?)
  * Driver: additional 'params' section in the URL

* allow top-level collecting measurements --> wrap synthetic simple measurement around it

* logo in report servlets (?)

* JUnit tests

* offloading data sink
  * unique ids per measurement --> referencing (?)
  * support for 'correcting' real time clocks of systems
  * per hierarchy: Thread name, Host, PID

* Correlation ID etc.: as a 'context' of a measurement hierarchy (if present)

* log asysmon overhead (?)

* extract a-base


AOP:
--> File I/O
--> Socket I/O


discuss
-------
* how to configure (non-static) ASysMon instance for JDBC logging
* how to deal with data sources in app server --> outside application scope

documentation
-------------
* terminology
  * measurement: something ongoing --> something like a builder
  * data: immutable results of a finished measurement

* initialization
  * completely non-static
  * or static 'ASysMon.get()' --> AStaticSysMonConfig.get(), changes must be registered there before first access

* AMinMaxAvgServlet
  * load-on-startup = 1
  * security --> filter --> responsibility of the application
  * display
    * color coding / percentage: relative to immediate parent
    * #: average number of calls *per parent*

* database drill-up servlet
  * 'eventually consistent' --> trade-off to avoid global locking

* no top-level 'parallel' measurement