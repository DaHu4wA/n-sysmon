todo
----
* configure ASysMon instance for JDBC
  * DataSource --> keep track of number of used connections

* database drill-up servlet: start with JDBC, inverse tree to the 'top'

* global measurements
  * currently used connections per connection pool

* offloading data sink

* JUnit tests

* aggregated presentation: handling of 'disjoint'


unique ids per measurement --> referencing (?)
support for 'correcting' real time clocks of systems

Einmalig in Root: Thread-ID, Host, PID

Correlation ID etc.: als „Kontext“ eines Messpunkts (wenn vorhanden)

* log asysmon overhead (?)

* extract a-base


AOP:
--> File I/O
--> Socket I/O


discuss
-------
* how to configure (non-static) ASysMon instance for JDBC logging
* how to deal with data sources in app server --> outside application scope

documentation
-------------
* terminology
  * measurement: something ongoing --> something like a builder
  * data: immutable results of a finished measurement

* initialization
  * completely non-static
  * or static 'ASysMon.get()' --> AStaticSysMonConfig.get(), changes must be registered there before first access

* AMinMaxAvgServlet
  * load-on-startup = 1
  * security --> filter --> responsibility of the application
  * display
    * color coding / percentage: relative to immediate parent
    * #: average number of calls *per parent*

* database drill-up servlet
  * does some processing --> use advisedly, esp. in production

* no top-level 'parallel' measurement